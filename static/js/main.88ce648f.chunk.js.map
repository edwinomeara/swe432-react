{"version":3,"sources":["Assignment.js","AssignmentList.js","App.js","index.js"],"names":["Assignment","assignment","checkAssignment","ListGroup","ListGroupItem","className","type","checked","complete","onChange","id","name","AssignmentList","assignments","map","Container","fluid","Row","Col","key","App","useState","setAssignments","assignmentName","useRef","useEffect","storedAssignments","JSON","parse","localStorage","getItem","setItem","stringify","xs","ref","placeholder","Button","variant","onClick","e","current","value","prevAssignments","uuidv4","newAssignments","filter","length","find","ReactDOM","render","StrictMode","Jumbotron","document","getElementById"],"mappings":"0TAGe,SAASA,EAAT,GAAsD,IAAhCC,EAA+B,EAA/BA,WAAYC,EAAmB,EAAnBA,gBAS/C,OACE,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KAIE,2BACEC,UAAU,OACVC,KAAK,WACLC,QAASN,EAAWO,SACpBC,SAlBR,WACEP,EAAgBD,EAAWS,OAmBtBT,EAAWU,O,4BCpBL,SAASC,EAAT,GAA2D,IAAjCC,EAAgC,EAAhCA,YAAaX,EAAmB,EAAnBA,gBACpD,OAAOW,EAAYC,KAAI,SAAAb,GACrB,OACE,kBAACc,EAAA,EAAD,CAAWC,OAAK,GACd,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,kBAAClB,EAAD,CACEmB,IAAKlB,EAAWS,GAChBR,gBAAiBA,EACjBD,WAAYA,U,YCmFXmB,MAvFf,WAAgB,IAAD,EACyBC,mBAAS,IADlC,mBACNR,EADM,KACOS,EADP,KAEPC,EAAiBC,mBAuCvB,OApCAC,qBAAU,WACR,IAAMC,EAAoBC,KAAKC,MAAMC,aAAaC,QAR9B,8BAShBJ,GAAmBJ,EAAeI,KACrC,IAGHD,qBAAU,WACRI,aAAaE,QAdO,4BAckBJ,KAAKK,UAAUnB,MACpD,CAACA,IA6BF,oCACE,kBAACE,EAAA,EAAD,KACE,kBAACE,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAKe,GAAI,GACP,2BACE5B,UAAU,YACV6B,IAAKX,EACLjB,KAAK,OACL6B,YAAY,6BAGhB,kBAACjB,EAAA,EAAD,KACE,kBAACkB,EAAA,EAAD,CAAQ/B,UAAU,GAAGgC,QAAQ,UAAUC,QAtCjD,SAAuBC,GACrB,IAAM5B,EAAOY,EAAeiB,QAAQC,MACvB,KAAT9B,IACJW,GAAe,SAAAoB,GACb,MAAM,GAAN,mBAAWA,GAAX,CAA4B,CAAEhC,GAAIiC,MAAUhC,OAAMH,UAAU,QAE9De,EAAeiB,QAAQC,MAAQ,QAgCvB,2BAIF,kBAACvB,EAAA,EAAD,KACE,kBAACkB,EAAA,EAAD,CAAQ/B,UAAU,GAAGgC,QAAQ,SAASC,QAzBhD,WACE,IAAMM,EAAiB/B,EAAYgC,QACjC,SAAA5C,GAAU,OAAKA,EAAWO,YAE5Bc,EAAesB,KAqBP,mCAON,kBAAC7B,EAAA,EAAD,CAAWC,MAAM,KAAKX,UAAU,aAC9B,kBAACY,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,6BACE,2BAAOb,UAAU,SAAjB,qCACA,2BAAOA,UAAU,SACdQ,EAAYgC,QAAO,SAAA5C,GAAU,OAAKA,EAAWO,YAAUsC,YAOlE,kBAAClC,EAAD,CACEC,YAAaA,EACbX,gBAvDN,SAAyBQ,GACvB,IAAMkC,EAAc,YAAO/B,GACrBZ,EAAa2C,EAAeG,MAAK,SAAA9C,GAAU,OAAIA,EAAWS,KAAOA,KACvET,EAAWO,UAAYP,EAAWO,SAClCc,EAAesB,Q,gBChCnBI,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAACC,EAAA,EAAD,CAAWnC,OAAK,EAACX,UAAU,WACzB,wBAAIA,UAAU,cAAd,wBACA,uBAAGA,UAAU,cAAb,4EAIF,kBAAC,EAAD,OAEF+C,SAASC,eAAe,W","file":"static/js/main.88ce648f.chunk.js","sourcesContent":["import React, { setState } from 'react';\nimport { ListGroup, ListGroupItem } from 'react-bootstrap';\n\nexport default function Assignment({ assignment, checkAssignment }) {\n  function checkClicked() {\n    checkAssignment(assignment.id);\n  }\n\n  function listItemClicked() {\n    console.log('clicked');\n  }\n\n  return (\n    <ListGroup>\n      <ListGroupItem\n      //onClick={listItemClicked}\n      //style={{ backgroundColor: this.state.color }}\n      >\n        <input\n          className=\"mr-3\"\n          type=\"checkbox\"\n          checked={assignment.complete}\n          onChange={checkClicked}\n        />\n        {assignment.name}\n      </ListGroupItem>\n    </ListGroup>\n  );\n}\n","import React from 'react';\nimport Assignment from './Assignment';\nimport { Container, Row, Col, Grid } from 'react-bootstrap';\n\nexport default function AssignmentList({ assignments, checkAssignment }) {\n  return assignments.map(assignment => {\n    return (\n      <Container fluid>\n        <Row>\n          <Col>\n            <Assignment\n              key={assignment.id}\n              checkAssignment={checkAssignment}\n              assignment={assignment}\n            />\n          </Col>\n        </Row>\n      </Container>\n    );\n  });\n}\n","import React, { useState, useRef, useEffect } from 'react';\nimport './App.css';\nimport uuidv4 from 'uuid/v4';\nimport AssignmentList from './AssignmentList';\nimport { Button } from 'react-bootstrap';\nimport { Container, Row, Col, Grid } from 'react-bootstrap';\n\nconst LocalStorageKey = 'assignmentApp.assignments';\n\nfunction App() {\n  const [assignments, setAssignments] = useState([]);\n  const assignmentName = useRef();\n\n  //loads the assignments\n  useEffect(() => {\n    const storedAssignments = JSON.parse(localStorage.getItem(LocalStorageKey));\n    if (storedAssignments) setAssignments(storedAssignments);\n  }, []);\n\n  //stores the assignments in local storage\n  useEffect(() => {\n    localStorage.setItem(LocalStorageKey, JSON.stringify(assignments));\n  }, [assignments]);\n\n  //adding assignments\n  function addAssignment(e) {\n    const name = assignmentName.current.value;\n    if (name === '') return;\n    setAssignments(prevAssignments => {\n      return [...prevAssignments, { id: uuidv4(), name, complete: false }];\n    });\n    assignmentName.current.value = null;\n  }\n\n  //check assignment\n  function checkAssignment(id) {\n    const newAssignments = [...assignments];\n    const assignment = newAssignments.find(assignment => assignment.id === id);\n    assignment.complete = !assignment.complete;\n    setAssignments(newAssignments);\n  }\n\n  //remove assignment\n  function removeAssignment() {\n    const newAssignments = assignments.filter(\n      assignment => !assignment.complete\n    );\n    setAssignments(newAssignments);\n  }\n\n  return (\n    <>\n      <Container>\n        <Row>\n          <Col xs={6}>\n            <input\n              className=\"userInput\"\n              ref={assignmentName}\n              type=\"text\"\n              placeholder=\"Type in assignment here\"\n            />\n          </Col>\n          <Col>\n            <Button className=\"\" variant=\"primary\" onClick={addAssignment}>\n              Add Assignment To List\n            </Button>\n          </Col>\n          <Col>\n            <Button className=\"\" variant=\"danger\" onClick={removeAssignment}>\n              Remove Completed Assignments\n            </Button>\n          </Col>\n        </Row>\n      </Container>\n\n      <Container fluid=\"md\" className=\"mt-3 mb-3\">\n        <Row>\n          <Col>\n            <div>\n              <label className=\"text1\">Assignments you need to complete:</label>\n              <label className=\"text2\">\n                {assignments.filter(assignment => !assignment.complete).length}\n              </label>\n            </div>\n          </Col>\n        </Row>\n      </Container>\n\n      <AssignmentList\n        assignments={assignments}\n        checkAssignment={checkAssignment}\n      />\n    </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport Bootstrap from 'bootstrap/dist/css/bootstrap.css';\nimport { Jumbotron } from 'react-bootstrap';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Jumbotron fluid className=\"bg-dark\">\n      <h1 className=\"ml-3 text3\">SWE 432 Assignment 7</h1>\n      <p className=\"ml-5 text3\">\n        Add assignments as needed, check if complete, and remove when finished.\n      </p>\n    </Jumbotron>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}